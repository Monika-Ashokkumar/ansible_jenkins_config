---
- name: Install and configure Jenkins
  hosts: targetservers
  become: yes

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
      become: true

    - name: Install Java OpenJDK 11
      apt:
        name: openjdk-11-jdk
        state: present
      become: true

    - name: Add Jenkins APT repository key
      apt_key:
        url: https://pkg.jenkins.io/debian/jenkins.io-2023.key
        state: present
      become: true

    - name: Add Jenkins APT repository
      apt_repository:
        repo: deb http://pkg.jenkins.io/debian-stable binary/
        state: present
        update_cache: yes
      become: true

    - name: Install Jenkins
      apt:
        name: jenkins
        state: present
      become: true

    - name: Start Jenkins service
      service:
        name: jenkins
        state: started
        enabled: yes

    - name: Retrieve Jenkins Admin Password
      shell: cat /var/lib/jenkins/secrets/initialAdminPassword
      register: adminpwd
      become: true

    - name: unlock and add admin user
      jenkins_script:
        script: |
          import jenkins.model.*
          import hudson.security.*
          import jenkins.security.s2m.AdminWhitelistRule

          def instance = Jenkins.getInstance()
          def hudsonRealm = new HudsonPrivateSecurityRealm(false)
          hudsonRealm.createAccount('jenkins', '{{ jenkins_user_pass }}') #configuration where the username is jenkins and password is being retrieved from admin_user_pass variable from vars.yml file
          instance.setSecurityRealm(hudsonRealm)
          def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
          strategy.setAllowAnonymousRead(false)
          instance.setAuthorizationStrategy(strategy)
          instance.save()
        args:
          user_pwd: "{{ jenkins_user_pass }}"
        user: admin
        password: "{{ adminpwd.stdout }}"

    - name: complete setup wizard
      jenkins_script:
       script: |
        import static jenkins.model.Jenkins.instance as jenkins
        import jenkins.install.InstallState
        if (!jenkins.installState.isSetupComplete()) {
          InstallState.INITIAL_SETUP_COMPLETED.initializeState()
        }
       user: admin
       password: "{{ adminpwd.stdout }}"
      become: true

    - name: install plugin
      jenkins_plugin:
       name: "{{ item }}"
       state: latest
       url_username: admin
       url_password: "{{ adminpwd.stdout }}"
      with_items: "{{ jenkins_plugins }}"
      become: true
